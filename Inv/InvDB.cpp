#include "InvDB.h"
// Necessary for file stream object handling
#include <fstream>
#include <string>

std::string InvDB::toString() {
   std::string retString = "";
   retString = "This is the parent specific toString test";
   return (retString);
}

void InvDB::display() {

}

void InvDB::adjustStock(Trans* trans) {

}

/**
 * AddFilm
 * Desc: adds a new film onject to the list
**/
bool InvDB::addFilm(Film& newFilm) {

   // search the table for the film being added to see if it's already present
   bool alreadyContainsFilm = false;
   int index = 0; 

   while (index < invTable.size()) {
      if (invTable.at(i) == newFilm) {
         alreadyContainsFilm = true;
         break;
      }
      else {
         index++;
      }
   }

   // if this is another instance of an existing Classic film, add the actor to
   // the list and increase the stock
   if (alreadyContainsFilm == true && genre == 'C') {

      return true;
   }
   // otherwise, if this isn't contained just add this film 
   else if (alreadyContainsFilm == false) {
      invTable.push_back(newFilm);
      return true;
   }
   // otherwise it must be an existing non-classic film, so ignore it
   else {
      return false
   }

}

/**
 * isLegal
 * Desc: checks that an item exists, 
**/
bool InvDB::isLegal(std::string command) {

   return true;
}



//-------|---------|---------|---------|---------|---------|---------|---------|
//
//       CONSTRUCTORS/DSTRUCTOR
//
//-------|---------|---------|---------|---------|---------|---------|---------|

/**
 * Int Constructor
 * Desc: uses a default size to dynamically allocate a new array
**/
InvDB::InvDB() {

}

/**
 * Int Constructor
 * Desc: takes in a size array and dynamically allocates an array to hold
 * the film titles
 * Pre: expects size to be generated by IntenvoryController
**/
InvDB::InvDB(std::ifstream data) {


   while (!data.eof()) {
      // Read the next relevant line of command
      std::string filmData;
      std::getline(data, filmData);

      if (filmData.length() > 10) {
         // create borrow object and run transaction
         if (filmData.at(0) == 'F') {
            addFilm(Comedy(filmData));
         }

         // create return object and run transaction
         else if (filmData.at(0) == 'D') {
            addFilm(Drama(filmData));
         }

         // check customer and display history
         else if (filmData.at(0) == 'C') {
            addFilm(Classic(filmData));
         }

         // otherwise, this is an invalid film type
         else {
            std::cerr << "Invalid film type: " << filmData.at(0) << std::endl;
         }
      }
   }
}

InvDB::~InvDB() {
   // std::cerr << "destruct invDB" << std::endl;

   // std::cerr << "end destruct invDB" << std::endl;
}
